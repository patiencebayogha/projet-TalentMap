#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('TalentMapLite:server');
var http = require('http');
var https = require("https");
var fs = require("fs");

/**
 * Create HTTP server.
 */
var server;

if(app.get('use_https')) {
    var config     = {
        key: fs.readFileSync(app.get('key_file')),
        cert: fs.readFileSync(app.get('cert_file'))
    };

    server = https.createServer(config, app);
} else {
    server = http.createServer(app);
}

/**
 * Listen on provided port, on all network interfaces.
 */
var port = app.get('port');
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
